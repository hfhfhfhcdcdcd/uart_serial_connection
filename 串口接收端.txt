///设计


module write_shixu(
input                   rst_n           ,
input                   sys_clk         ,
input                   rx_data         ,//串行接收
output  reg [7:0]       uart_data     //并行发送
);
reg          rx_done     ;
reg          rx_reg1     ; 
reg          rx_reg2     ;
reg         rx_flag     ;
wire        start       ;
reg         [3:0]  cnt_bit;

//两拍/////////////////
always@(posedge sys_clk or negedge rst_n)
if(!rst_n)begin
    rx_reg1<=1'b0;
    rx_reg2<=1'b0;end
else begin
    rx_reg1<=rx_data;
    rx_reg2<=rx_reg1;
end

///start//////////////
assign start=~rx_reg1&rx_reg2;


//rx_flag信号//////////////////////////
always@(posedge sys_clk)
if(!rst_n)
    rx_flag<=0;
else if (start)
        rx_flag<=1;
else if(cnt_bit==9)
    rx_flag<=0;
else
   rx_flag<=1;


///一个字节的传输时间___cnt/////
reg         [8:0]  cnt;
parameter   time_434=434  ;//一个字节cnt记到434
always@(posedge sys_clk)
if(!rst_n)
    cnt<=0;
else if(rx_flag)
    if(cnt==time_434-1)
        cnt<=0;
    else
        cnt<=cnt+1;
else
    cnt<=0; 
    
    
///10个字节的传输时间___cnt_bit/////
always@(posedge sys_clk)
if(!rst_n)
    cnt_bit<=0;
else if(cnt_bit==9)
    cnt_bit<=0;
else if(cnt==time_434-1)
    cnt_bit<=cnt_bit+1;
else
    cnt_bit<=cnt_bit;
    
    
//rx_done////////////////////////////
always@(posedge sys_clk)
if(!rst_n)
    rx_done<=0;
else if(cnt_bit==9)
    rx_done<=1;
else
    rx_done<=0;
    
    
///uart_data////////////////////////////                            uart_data <= {rx_data, uart_data[7:1]};
always@(posedge sys_clk)
if(!rst_n)
    uart_data<=0;
else if(cnt_bit<9)
    uart_data <= rx_data;
else
    uart_data<=0;
endmodule



/////仿真


module shixu_tb();
reg            rst_n         ;
reg            sys_clk       ;
reg            rx_data       ;
wire           rx_reg1       ;
wire           rx_reg2       ;
wire           rx_flag       ;
wire           start         ;
wire           rx_done       ;

write_shixu  w1(
.          rst_n         (rst_n    )   ,
.          sys_clk       (sys_clk  )   ,
.          rx_data       (rx_data  )   ,//串行接收
.          uart_data     (uart_data)    //并行发送
);



/**#100 rx_data=1'b0;
#100 rx_data=1'b1;   
#100 rx_data=1'b0;   
#100 rx_data=1'b1;   
#100 rx_data=1'b0;   
#100 rx_data=1'b1;   
#100 rx_data=1'b0;   
#100 rx_data=1'b1; */ 

                                       
initial begin                          
    sys_clk = 1'b0;                    
    forever #10 sys_clk = ~sys_clk;                               
end   

initial begin
   rst_n=0;    
    #100 rst_n=1;   
    #20 rx_data=1'b1;      
end                                 
endmodule                                        